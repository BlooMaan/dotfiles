{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"die and print json": {
		"prefix": "diejson",
		"body": [
			"die(json_encode($$0));"
		]
	},
	"die and var_export": {
		"prefix": "dievarexport",
		"body": [
			"die(var_export($$0, true));"
		]
	},
	"Log error with zend": {
		"prefix": "logzend",
		"body": [
            "Log::getInstance()->logException(",
			"\t$$e,",
			"\t\\Zend_Log::ERR,",
			"\t\"$0\"",
			");"
		]
	},
	"Log notice": {
		"prefix": "lognotice",
		"body": [
            "Log::getInstance()->log(",
			"\t\"$0\",",
			"\t\\Zend_Log::NOTICE",
			");"
		]
	},
	"Mock object": {
		"prefix": "mockobj",
		"body": [
			"= Mockery::mock($1::class)",
			"\t->shouldReceive('')",
			"\t->with()",
			"\t->andReturn()",
            "\t->atLeast()",
            "\t->times(1)",
			"\t->mock();"
		]
	},
	"Mock iterator": {
		"prefix": "mockitt",
		"body": [
			"= Mockery::mock(Itt::class)",
			"\t->shouldReceive('rewind')",
			"\t->once()",
			"\t->andReturnSelf()",
			"\t->shouldReceive('valid')",
			"\t->andReturn(true, false)",
			"\t->times(2)",
			"\t->shouldReceive('next')",
			"\t->andReturnSelf()",
			"\t->times(1)",
			"\t->shouldReceive('current')",
			"\t->andReturn($0)",
			"\t->times(1)",
			"\t->mock();"
		]
	},
	"Open Mpdf Comment": {
		"prefix": "mpdfcomm",
		"body": "<!--mpdf <!--  mpdf-->"
	}
}